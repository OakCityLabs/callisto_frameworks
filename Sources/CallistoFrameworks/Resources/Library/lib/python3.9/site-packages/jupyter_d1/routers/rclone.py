import asyncio
from typing import Any

import requests
from asyncblink import signal  # type: ignore
from fastapi import APIRouter, Depends, Request
from fastapi.logger import logger

from jupyter_d1.signals import RCLONE_UPDATE

from ..d1_response import D1Response
from ..deps import write_access
from ..settings import settings
from ..signals import WATCHDOG_FILE_SYSTEM_EVENT

try:
    if not settings.WATCHDOG_ENABLED:
        raise ImportError("settings.WATCHDOG_ENABLED is False")
    from watchdog.events import FileSystemEvent  # type: ignore
    from watchdog.events import PatternMatchingEventHandler
    from watchdog.observers import Observer  # type: ignore

    has_watchdog = True
    logger.debug("Successfully loaded watchdog.")
except ImportError as e:
    has_watchdog = False
    logger.debug(f"Watchdog disabled.  Failed to import - {e}")


router = APIRouter(default_response_class=D1Response)


@router.post("/{api_path:path}", dependencies=[Depends(write_access)])
async def rclone_api(api_path: str, request: Request) -> Any:
    body = await request.body()
    r = requests.post(
        f"http://127.0.0.1:5572/{api_path}",
        params=request.query_params,
        headers=request.headers,
        data=body,
    )
    return r.json()


def dispatch_rclone_stats():
    r = None
    try:
        r = requests.post(f"http://127.0.0.1:5572/core/stats", timeout=3)
    except Exception:
        pass
    if r is not None:
        signal(RCLONE_UPDATE).send(stats=r.json())


async def stats_periodic():
    while True:
        dispatch_rclone_stats()
        await asyncio.sleep(settings.RCLONE_STATS_POLLING_INTERVAL)


if has_watchdog:

    async def send_watchdog_event(event: FileSystemEvent):
        signal(WATCHDOG_FILE_SYSTEM_EVENT).send(
            event_type=event.event_type,
            src_path=event.src_path,
            dest_path=getattr(event, "dest_path", None),
        )

    class D1FileSystemEventHandler(PatternMatchingEventHandler):
        def on_any_event(self, event: FileSystemEvent):
            asyncio.run(send_watchdog_event(event))

    def start_watchdog():
        event_handler = D1FileSystemEventHandler(
            ignore_patterns=settings.WATCHDOG_IGNORE_PATTERNS
        )
        observer = Observer()
        observer.schedule(event_handler, settings.ROOT_DIR, recursive=True)
        observer.start()


else:

    def start_watchdog():
        pass
