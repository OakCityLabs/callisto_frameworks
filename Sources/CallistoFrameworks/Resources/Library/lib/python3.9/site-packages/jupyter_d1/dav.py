from typing import List, Set

from wsgidav.wsgidav_app import WsgiDAVApp  # type: ignore

from .settings import settings


class D1WsgiDAVApp(WsgiDAVApp):
    def remove_providers(self, shares: List[str]):
        for share in shares:
            self.provider_map.pop(share, None)

        # Store the list of share paths, ordered by length, so route lookups
        # will return the most specific match
        self.sorted_share_list = [s.lower() for s in self.provider_map.keys()]
        self.sorted_share_list = sorted(
            self.sorted_share_list, key=len, reverse=True
        )


dav = D1WsgiDAVApp(settings.DAV_SETTINGS)


class DAVManager:
    def __init__(self):
        # List of shares used by notebooks (so, excluding the D1 working
        # directory and any default shares that wsgi_dav provides, so they
        # dont get pruned). A share is just a route exposed by wsgi_dav,
        # i.e. "/tmp/docs" is the share for the /tmp/Docs directory, where
        # https://host/dav/tmp/docs is its dav url
        self.shares: Set[str] = set()

    def add_provider(self, directory: str) -> str:
        # Check if an existing provider contains the required directory
        dav_share, dav_provider = dav.resolve_provider(directory.lower())
        # Create new provider if needed
        if dav_share is None and dav_provider is None or dav_share == "/":
            dav_share = "/" + directory.lower().strip("/")
            dav.add_provider(dav_share, directory)
            self.shares.add(dav_share)

        return dav_share

    def prune_providers(self, shares: List[str]):
        unused_shares = [p for p in self.shares if p not in shares]
        dav.remove_providers(unused_shares)
        self.shares = set(shares)


dav_manager = DAVManager()
