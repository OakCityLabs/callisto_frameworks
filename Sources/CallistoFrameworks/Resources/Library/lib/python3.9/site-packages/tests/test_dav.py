import os
import pathlib
import shutil
from typing import Dict

from fastapi.testclient import TestClient

from jupyter_d1.settings import settings

from .utils import (get_permissionless_token, get_read_only_token,
                    get_superuser_token)


class TestDav:
    def test_dav_auth(
        self, client: TestClient,
    ):
        response = client.get("/dav")
        assert response.status_code == 401

        response = client.get(f"/dav/", auth=(get_permissionless_token(), ""))
        assert response.status_code == 401

        response = client.get(f"/dav/", auth=(get_read_only_token(), ""))
        assert response.status_code == 200

        root_dav = response.text

        response = client.get(
            f"/dav{settings.ROOT_DIR}", auth=(get_read_only_token(), "")
        )
        assert response.status_code == 200
        # This is kind of goofy, but it does the trick for now
        assert (
            response.text.replace("tmp/jupyter_d1_test/", "")
            .replace("tmp/jupyter_d1_test", "")
            .replace("dav/tmp/", "")
            == root_dav
        )

        response = client.get(
            f"/dav{settings.ROOT_DIR}", auth=(get_superuser_token(), "")
        )
        assert response.status_code == 200

    def test_dav_provider_added_for_notebook(
        self, client: TestClient, superuser_token_headers: Dict[str, str]
    ):
        shutil.copyfile(
            "tests/notebooks/simple.ipynb", "tests/notebooks/simple_copy.ipynb"
        )
        other_directory = f"{os.getcwd()}/tests/notebooks"
        token = get_read_only_token()
        response = client.get(f"/dav{other_directory}", auth=(token, ""))
        assert response.status_code == 404

        path = f"{other_directory}/simple_copy.ipynb"
        response = client.get(
            f"/notebooks/open/{path}", headers=superuser_token_headers
        )
        assert response.status_code == 201
        resp_json = response.json()["notebook"]
        uuid = resp_json["metadata"]["jupyter_d1"]["uuid"]

        assert (
            resp_json["metadata"]["jupyter_d1"]["working_directory"]
            == other_directory
        )
        response = client.get(f"/dav{other_directory}", auth=(token, ""))
        assert response.status_code == 200

        response = client.delete(
            f"/notebooks/{uuid}", headers=superuser_token_headers
        )
        assert response.status_code == 204

        response = client.get(f"/dav{other_directory}", auth=(token, ""))
        assert response.status_code == 404

        os.remove("tests/notebooks/simple_copy.ipynb")

    def test_dav_provider_added_for_notebook_set_working_dir(
        self, client: TestClient, superuser_token_headers: Dict[str, str]
    ):
        shutil.copyfile(
            "tests/notebooks/simple.ipynb", "tests/notebooks/simple_copy.ipynb"
        )
        other_directory = f"{os.getcwd()}/tests/notebooks"
        working_dir = "/tmp"
        resolved_work_dir = str(pathlib.Path(working_dir).resolve())
        token = get_read_only_token()
        response = client.get(f"/dav{resolved_work_dir}", auth=(token, ""))
        assert response.status_code == 404

        path = f"{other_directory}/simple_copy.ipynb"
        response = client.get(
            f"/notebooks/open/{path}",
            headers=superuser_token_headers,
            params={"working_directory": working_dir},
        )
        assert response.status_code == 201
        resp_json = response.json()["notebook"]
        uuid = resp_json["metadata"]["jupyter_d1"]["uuid"]

        assert (
            resp_json["metadata"]["jupyter_d1"]["working_directory"]
            == resolved_work_dir
        )
        response = client.get(f"/dav{resolved_work_dir}", auth=(token, ""))
        assert response.status_code == 200

        response = client.delete(
            f"/notebooks/{uuid}", headers=superuser_token_headers
        )
        assert response.status_code == 204

        response = client.get(f"/dav{resolved_work_dir}", auth=(token, ""))
        assert response.status_code == 404

        os.remove("tests/notebooks/simple_copy.ipynb")

    def test_dav_provider_notebook_in_subdirectory(
        self, client: TestClient, superuser_token_headers: Dict[str, str]
    ):
        """
        If notebook is in subdirectory of d1's working directory, 
        dav should work regardless of whether the notebook is open.
        """
        pathlib.Path("/tmp/jupyter_d1_test/some_nbs").mkdir(exist_ok=True)
        shutil.copyfile(
            "tests/notebooks/simple.ipynb",
            "/tmp/jupyter_d1_test/some_nbs/simple_copy.ipynb",
        )

        nb_dir = "/tmp/jupyter_d1_test/some_nbs"
        working_dir = "/tmp/jupyter_d1_test/some_nbs"
        token = get_read_only_token()
        response = client.get(f"/dav{working_dir}", auth=(token, ""))
        assert response.status_code == 200

        path = f"{nb_dir}/simple_copy.ipynb"
        response = client.get(
            f"/notebooks/open/{path}", headers=superuser_token_headers
        )
        assert response.status_code == 201
        resp_json = response.json()["notebook"]
        uuid = resp_json["metadata"]["jupyter_d1"]["uuid"]

        assert (
            resp_json["metadata"]["jupyter_d1"]["working_directory"]
            == working_dir
        )
        response = client.get(f"/dav{working_dir}", auth=(token, ""))
        assert response.status_code == 200

        response = client.delete(
            f"/notebooks/{uuid}", headers=superuser_token_headers
        )
        assert response.status_code == 204

        response = client.get(f"/dav{working_dir}", auth=(token, ""))
        assert response.status_code == 200

        shutil.rmtree("/tmp/jupyter_d1_test/some_nbs")
