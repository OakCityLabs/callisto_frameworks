import asyncio
import os
from datetime import datetime, timedelta
from typing import AsyncGenerator, Dict

import pytest
from async_asgi_testclient import TestClient as WebSocketTestClient
from fastapi import WebSocket
from fastapi.testclient import TestClient
from pytest_mock import MockFixture

from jupyter_d1 import app
from jupyter_d1.settings import settings

from .utils import wait_for_event


@pytest.fixture()
async def websocket_client() -> AsyncGenerator:
    async with WebSocketTestClient(app) as c:
        yield c


def test_rclone(
    client: TestClient,
    superuser_token_headers: Dict[str, str],
    mocker: MockFixture,
):
    mock_requests = mocker.patch("jupyter_d1.routers.rclone.requests")
    mock_requests.post().json.return_value = {"pldefe": "fj39499"}
    response = client.post(
        "/rclone/config/dump", headers=superuser_token_headers
    )
    assert response.status_code == 200
    # print(response.json())
    assert response.json() == {"pldefe": "fj39499"}
    assert (
        mock_requests.post.call_args[0][0]
        == "http://127.0.0.1:5572/config/dump"
    )


def test_rclone_query_params(
    client: TestClient,
    superuser_token_headers: Dict[str, str],
    mocker: MockFixture,
):
    mock_requests = mocker.patch("jupyter_d1.routers.rclone.requests")
    mock_requests.post().json.return_value = {"gg": "754d"}
    response = client.post(
        "/rclone/config/get",
        headers=superuser_token_headers,
        params={"name": "gdrive"},
    )
    assert response.status_code == 200
    # print(response.json())
    assert response.json() == {"gg": "754d"}
    assert (
        mock_requests.post.call_args[0][0]
        == "http://127.0.0.1:5572/config/get"
    )
    assert dict(mock_requests.post.call_args[1]["params"]) == {
        "name": "gdrive"
    }


def test_rclone_post_data(
    client: TestClient,
    superuser_token_headers: Dict[str, str],
    mocker: MockFixture,
):
    mock_requests = mocker.patch("jupyter_d1.routers.rclone.requests")
    mock_requests.post().json.return_value = {"polnd": "logkj"}
    superuser_token_headers["Content-Type"] = "application/json"
    response = client.post(
        "/rclone/options/set",
        headers=superuser_token_headers,
        data='{"vfs": {"CacheMaxSize": 100}}',
    )
    assert response.status_code == 200
    # print(response.json())
    assert response.json() == {"polnd": "logkj"}
    # mock_requests.post.assert_called_once()
    # print(mock_requests.post.calls)
    assert (
        mock_requests.post.call_args[0][0]
        == "http://127.0.0.1:5572/options/set"
    )
    assert (
        mock_requests.post.call_args[1]["data"]
        == b'{"vfs": {"CacheMaxSize": 100}}'
    )


@pytest.fixture()
async def superuser_token_headers(
    websocket_client: WebSocketTestClient,
) -> Dict[str, str]:
    r = await websocket_client.get(
        "/login/access-token", headers={"Authorization": "test9token_4"}
    )
    token = r.json()["token"]["access_token"]
    headers = {"Authorization": f"Bearer {token}"}
    return headers


@pytest.mark.asyncio
async def test_rclone_websocket(
    websocket_client: WebSocketTestClient,
    superuser_token_headers: Dict[str, str],
    mocker: MockFixture,
):
    mock_requests = mocker.patch("jupyter_d1.routers.rclone.requests")
    mock_requests.post().json.return_value = {"polnd": "logkj"}

    async with websocket_client.websocket_connect(
        f"/server/ws", headers=superuser_token_headers
    ) as websocket:
        time = datetime.now()

        async def assert_stats():
            resp = await wait_for_event(websocket, "rclone_stats")
            assert resp == {"rclone_stats": {"polnd": "logkj"}}
            assert (
                time - datetime.now() - timedelta(seconds=3)
            ).microseconds < 1e6

        for i in range(3):
            await assert_stats()


@pytest.mark.asyncio
@pytest.mark.usefixtures("clear_notebook_directory")
class TestWatchdogWebSocket:
    async def clear_websocket_queue(self, websocket):
        while True:
            try:
                await asyncio.wait_for(websocket.receive_json(), 0.3)
            except Exception:
                break

    async def create_dir(self, websocket: WebSocket):
        os.mkdir(f"{settings.ROOT_DIR}/new_dir")

        resp = await wait_for_event(websocket, "watchdog_event")
        assert resp == {
            "watchdog_event": {
                "event_type": "modified",
                "src_path": "/tmp/jupyter_d1_test",
                "dest_path": None,
            }
        }
        resp = await wait_for_event(websocket, "watchdog_event")
        assert resp == {
            "watchdog_event": {
                "event_type": "created",
                "src_path": "/tmp/jupyter_d1_test/new_dir",
                "dest_path": None,
            }
        }

    async def create_file(
        self, websocket: WebSocket, directory: str = settings.ROOT_DIR
    ):
        with open(f"{directory}/new_file", "w") as f:
            f.write("this is a new file")

        resp1 = await wait_for_event(websocket, "watchdog_event")
        resp2 = await wait_for_event(websocket, "watchdog_event")
        expected = [
            {
                "watchdog_event": {
                    "event_type": "modified",
                    "src_path": f"{directory}",
                    "dest_path": None,
                }
            },
            {
                "watchdog_event": {
                    "event_type": "created",
                    "src_path": f"{directory}/new_file",
                    "dest_path": None,
                }
            },
        ]
        assert expected.pop(expected.index(resp1))
        assert expected.pop(expected.index(resp2))

    async def test_create_dir(
        self,
        websocket_client: WebSocketTestClient,
        superuser_token_headers: Dict[str, str],
        mocker: MockFixture,
    ):
        async with websocket_client.websocket_connect(
            f"/server/ws", headers=superuser_token_headers
        ) as websocket:
            # assert False
            await self.create_dir(websocket)

    async def test_create_file(
        self,
        websocket_client: WebSocketTestClient,
        superuser_token_headers: Dict[str, str],
    ):
        async with websocket_client.websocket_connect(
            f"/server/ws", headers=superuser_token_headers
        ) as websocket:
            os.mkdir(f"{settings.ROOT_DIR}/new_dir")
            await self.create_file(websocket)

    async def test_modified_file(
        self,
        websocket_client: WebSocketTestClient,
        superuser_token_headers: Dict[str, str],
    ):
        async with websocket_client.websocket_connect(
            f"/server/ws", headers=superuser_token_headers
        ) as websocket:
            await self.clear_websocket_queue(websocket)
            await self.create_file(websocket)

            with open(f"{settings.ROOT_DIR}/new_file", "w") as f:
                f.write("this is an edit")
            expected = [
                {
                    "watchdog_event": {
                        "event_type": "modified",
                        "src_path": "/tmp/jupyter_d1_test/new_file",
                        "dest_path": None,
                    }
                }
            ]
            resps = []
            for _ in expected:
                resps.append(await wait_for_event(websocket, "watchdog_event"))
            for resp in resps:
                assert expected.pop(expected.index(resp)) is not None

    async def test_deleted_file(
        self,
        websocket_client: WebSocketTestClient,
        superuser_token_headers: Dict[str, str],
    ):
        async with websocket_client.websocket_connect(
            f"/server/ws", headers=superuser_token_headers
        ) as websocket:
            await self.clear_websocket_queue(websocket)
            await self.create_file(websocket)

            os.remove(f"{settings.ROOT_DIR}/new_file")

            resp1 = await wait_for_event(websocket, "watchdog_event")
            resp2 = await wait_for_event(websocket, "watchdog_event")
            expected = [
                {
                    "watchdog_event": {
                        "event_type": "deleted",
                        "src_path": "/tmp/jupyter_d1_test/new_file",
                        "dest_path": None,
                    }
                },
                {
                    "watchdog_event": {
                        "event_type": "modified",
                        "src_path": "/tmp/jupyter_d1_test",
                        "dest_path": None,
                    }
                },
            ]
            assert expected.pop(expected.index(resp1))
            assert expected.pop(expected.index(resp2))

    async def test_nested_updates(
        self,
        websocket_client: WebSocketTestClient,
        superuser_token_headers: Dict[str, str],
    ):
        async with websocket_client.websocket_connect(
            f"/server/ws", headers=superuser_token_headers
        ) as websocket:
            await self.clear_websocket_queue(websocket)
            await self.create_dir(websocket)
            await self.create_file(
                websocket, directory=f"{settings.ROOT_DIR}/new_dir"
            )
            os.rename(
                f"{settings.ROOT_DIR}/new_dir/new_file",
                f"{settings.ROOT_DIR}/new_file",
            )

            expected = [
                {
                    "watchdog_event": {
                        "event_type": "moved",
                        "src_path": "/tmp/jupyter_d1_test/new_dir/new_file",
                        "dest_path": "/tmp/jupyter_d1_test/new_file",
                    }
                },
                {
                    "watchdog_event": {
                        "event_type": "modified",
                        "src_path": "/tmp/jupyter_d1_test",
                        "dest_path": None,
                    }
                },
                {
                    "watchdog_event": {
                        "event_type": "modified",
                        "src_path": "/tmp/jupyter_d1_test/new_dir",
                        "dest_path": None,
                    }
                },
            ]
            resps = []
            for _ in expected:
                resps.append(await wait_for_event(websocket, "watchdog_event"))
            for resp in resps:
                assert expected.pop(expected.index(resp)) is not None
